
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using System.Collections.Generic;
using System.Linq;

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     02/08/2025 12:37:47 +00:00
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Generated
{
    public static class Vehicle Endpoints
    {
        public static void MapVehicle Endpoints(this IEndpointRouteBuilder app)
        {
            // Get All
            app.MapGet("/vehicle s", (List<Vehicle > vehicle s) =>
            {
                return Results.Ok(vehicle s);
            });

            // Get by ID
            app.MapGet("/vehicle s/{{id}}", (int id, List<Vehicle > vehicle s) =>
            {
                var item = vehicle s.FirstOrDefault(x => x.Id == id);
                return item != null ? Results.Ok(item) : Results.NotFound();
            });

            // Create
            app.MapPost("/vehicle s", (Vehicle  vehicle , List<Vehicle > vehicle s) =>
            {
                vehicle s.Add(vehicle );
                return Results.Created($"/vehicle s/{{vehicle .Id}}", vehicle );
            });

            // Update
            app.MapPut("/vehicle s/{{id}}", (int id, Vehicle  updatedVehicle , List<Vehicle > vehicle s) =>
            {
                var existingItem = vehicle s.FirstOrDefault(x => x.Id == id);
                if (existingItem == null)
                {
                    return Results.NotFound();
                }

                existingItem.VehicleId = updatedVehicle .VehicleId;
                existingItem.Make = updatedVehicle .Make;
                existingItem.Model = updatedVehicle .Model;
                existingItem.Year = updatedVehicle .Year;
                existingItem.Color = updatedVehicle .Color;
                existingItem.DailyRate = updatedVehicle .DailyRate;
                return Results.Ok(existingItem);
            });

            // Delete
            app.MapDelete("/vehicle s/{{id}}", (int id, List<Vehicle > vehicle s) =>
            {
                var item = vehicle s.FirstOrDefault(x => x.Id == id);
                if (item != null)
                {
                    vehicle s.Remove(item);
                    return Results.NoContent();
                }

                return Results.NotFound();
            });
        }

        // Example In-Memory Data Source (for testing purposes)
        public static List<Vehicle > GetVehicle s() => new List<Vehicle >
        {
            new Vehicle  { Id = 1, Name = "Vehicle  1", Price = 10.5m * 1, Stock = 100 * 1 },
            new Vehicle  { Id = 2, Name = "Vehicle  2", Price = 10.5m * 2, Stock = 100 * 2 },
            new Vehicle  { Id = 3, Name = "Vehicle  3", Price = 10.5m * 3, Stock = 100 * 3 },
            new Vehicle  { Id = 4, Name = "Vehicle  4", Price = 10.5m * 4, Stock = 100 * 4 },
            new Vehicle  { Id = 5, Name = "Vehicle  5", Price = 10.5m * 5, Stock = 100 * 5 },
        
            };
        }

    public class Vehicle 
    {
        public int VehicleId { get; set; }
        public string Make { get; set; }
        public string Model { get; set; }
        public int Year { get; set; }
        public string Color { get; set; }
        public decimal DailyRate { get; set; }
  }
}
