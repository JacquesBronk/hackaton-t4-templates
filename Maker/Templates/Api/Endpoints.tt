<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>

<# 
    string jsonFilePath = Host.ResolvePath("..\\..\\Definition.json");
    string jsonContent = File.ReadAllText(jsonFilePath);
    JObject data = JObject.Parse(jsonContent);

    var appName =  data["AppName"];

    string outputBasePath = Path.GetDirectoryName(Host.TemplateFile);
      
    foreach (var page in data["DbTable"])
    {
        string modelName = (string)page["TableName"];
        string outputFilePath = Path.Combine(outputBasePath, $"{modelName}.cs");
    
        List<(string Type, string Name)> properties = page.SelectToken("Columns").Select(c => ((string)c["Type"], (string)c["Name"])).ToList();

        string modelVariableName = char.ToLower(modelName[0]) + modelName.Substring(1);
#>

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;
using System.Collections.Generic;
using System.Linq;

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     <#=DateTimeOffset.UtcNow#>
// </auto-generated>
// ------------------------------------------------------------------------------

namespace <#= appName #>
{
    public static class <#= modelName #>Endpoints
    {
        public static void Map<#= modelName #>Endpoints(this IEndpointRouteBuilder app)
        {
            // Get All
            app.MapGet("/<#= modelVariableName #>s", (List<<#= modelName #>> <#= modelVariableName #>s) =>
            {
                return Result.Ok(<#= modelVariableName #>s);
            });

            // Get by ID
            app.MapGet("/<#= modelVariableName #>s/{{id}}", (int id, List<<#= modelName #>> <#= modelVariableName #>s) =>
            {
                var item = <#= modelVariableName #>s.FirstOrDefault(x => x.Id == id);
                return item != null ? Result.Ok(item) : Result.NotFound();
            });

            // Create
            app.MapPost("/<#= modelVariableName #>s", (<#= modelName #> <#= modelVariableName #>, List<<#= modelName #>> <#= modelVariableName #>s) =>
            {
                <#= modelVariableName #>s.Add(<#= modelVariableName #>);
                return Result.Created($"/<#= modelVariableName #>s/{{<#= modelVariableName #>.Id}}", <#= modelVariableName #>);
            });

            // Update
            app.MapPut("/<#= modelVariableName #>s/{{id}}", (int id, <#= modelName #> updated<#= modelName #>, List<<#= modelName #>> <#= modelVariableName #>s) =>
            {
                var existingItem = <#= modelVariableName #>s.FirstOrDefault(x => x.Id == id);
                if (existingItem == null)
                {
                    return Result.NotFound();
                }

<#
        foreach (var property in properties.Where(p => p.Name != "Id"))
        {
#>                existingItem.<#= property.Name #> = updated<#= modelName #>.<#= property.Name #>;
<#      } #>
                return Result.Ok(existingItem);
            });

            // Delete
            app.MapDelete("/<#= modelVariableName #>s/{{id}}", (int id, List<<#= modelName #>> <#= modelVariableName #>s) =>
            {
                var item = <#= modelVariableName #>s.FirstOrDefault(x => x.Id == id);
                if (item != null)
                {
                    <#= modelVariableName #>s.Remove(item);
                    return Result.NoContent();
                }

                return Result.NotFound();
            });
        }

        // Example In-Memory Data Source (for testing purposes)
        public static List<<#= modelName #>> Get<#= modelName #>s() => new List<<#= modelName #>>
        {
<#
        foreach (var i in Enumerable.Range(1, 5))
        {
#>            
<#      }
#>        
            };
        }

    public class <#= modelName #>
    {
<#
        foreach (var property in properties)
        {
#>        public <#= property.Type #> <#= property.Name #> { get; set; }
<#      
        }

#>  }
}
<#
        
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Clear();
        Debug.WriteLine($"File written to: {outputFilePath}");
    }
#>    
