

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;
using System.Collections.Generic;
using System.Linq;

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     02/08/2025 15:04:39 +00:00
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Rentalthingy
{
    public static class RentalEndpoints
    {
        public static void MapRentalEndpoints(this IEndpointRouteBuilder app)
        {
            // Get All
            app.MapGet("/rentals", (List<Rental> rentals) =>
            {
                return Result.Ok(rentals);
            });

            // Get by ID
            app.MapGet("/rentals/{{id}}", (int id, List<Rental> rentals) =>
            {
                var item = rentals.FirstOrDefault(x => x.Id == id);
                return item != null ? Result.Ok(item) : Result.NotFound();
            });

            // Create
            app.MapPost("/rentals", (Rental rental, List<Rental> rentals) =>
            {
                rentals.Add(rental);
                return Result.Created($"/rentals/{{rental.Id}}", rental);
            });

            // Update
            app.MapPut("/rentals/{{id}}", (int id, Rental updatedRental, List<Rental> rentals) =>
            {
                var existingItem = rentals.FirstOrDefault(x => x.Id == id);
                if (existingItem == null)
                {
                    return Result.NotFound();
                }

                existingItem.RentalId = updatedRental.RentalId;
                existingItem.RentalDate = updatedRental.RentalDate;
                existingItem.ReturnDate = updatedRental.ReturnDate;
                existingItem.RentalFee = updatedRental.RentalFee;
                existingItem.CustomerId = updatedRental.CustomerId;
                existingItem.VehicleId = updatedRental.VehicleId;
                return Result.Ok(existingItem);
            });

            // Delete
            app.MapDelete("/rentals/{{id}}", (int id, List<Rental> rentals) =>
            {
                var item = rentals.FirstOrDefault(x => x.Id == id);
                if (item != null)
                {
                    rentals.Remove(item);
                    return Result.NoContent();
                }

                return Result.NotFound();
            });
        }

        // Example In-Memory Data Source (for testing purposes)
        public static List<Rental> GetRentals() => new List<Rental>
        {
            
            
            
            
            
        
            };
        }

    public class Rental
    {
        public int RentalId { get; set; }
        public DateTime RentalDate { get; set; }
        public DateTime ReturnDate { get; set; }
        public decimal RentalFee { get; set; }
        public int CustomerId { get; set; }
        public int VehicleId { get; set; }
  }
}
