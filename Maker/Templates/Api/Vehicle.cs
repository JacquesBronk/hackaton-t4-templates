
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;
using System.Collections.Generic;
using System.Linq;

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     02/08/2025 13:05:19 +00:00
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Rentalthingy
{
    public static class VehicleEndpoints
    {
        public static void MapVehicleEndpoints(this IEndpointRouteBuilder app)
        {
            // Get All
            app.MapGet("/vehicles", (List<Vehicle> vehicles) =>
            {
                return Result.Ok(vehicles);
            });

            // Get by ID
            app.MapGet("/vehicles/{{id}}", (int id, List<Vehicle> vehicles) =>
            {
                var item = vehicles.FirstOrDefault(x => x.Id == id);
                return item != null ? Result.Ok(item) : Result.NotFound();
            });

            // Create
            app.MapPost("/vehicles", (Vehicle vehicle, List<Vehicle> vehicles) =>
            {
                vehicles.Add(vehicle);
                return Result.Created($"/vehicles/{{vehicle.Id}}", vehicle);
            });

            // Update
            app.MapPut("/vehicles/{{id}}", (int id, Vehicle updatedVehicle, List<Vehicle> vehicles) =>
            {
                var existingItem = vehicles.FirstOrDefault(x => x.Id == id);
                if (existingItem == null)
                {
                    return Result.NotFound();
                }

                existingItem.VehicleId = updatedVehicle.VehicleId;
                existingItem.Make = updatedVehicle.Make;
                existingItem.Model = updatedVehicle.Model;
                existingItem.Year = updatedVehicle.Year;
                existingItem.Color = updatedVehicle.Color;
                existingItem.DailyRate = updatedVehicle.DailyRate;
                return Result.Ok(existingItem);
            });

            // Delete
            app.MapDelete("/vehicles/{{id}}", (int id, List<Vehicle> vehicles) =>
            {
                var item = vehicles.FirstOrDefault(x => x.Id == id);
                if (item != null)
                {
                    vehicles.Remove(item);
                    return Result.NoContent();
                }

                return Result.NotFound();
            });
        }

        // Example In-Memory Data Source (for testing purposes)
        public static List<Vehicle> GetVehicles() => new List<Vehicle>
        {
            
            
            
            
            
        
            };
        }

    public class Vehicle
    {
        public int VehicleId { get; set; }
        public string Make { get; set; }
        public string Model { get; set; }
        public int Year { get; set; }
        public string Color { get; set; }
        public decimal DailyRate { get; set; }
  }
}
