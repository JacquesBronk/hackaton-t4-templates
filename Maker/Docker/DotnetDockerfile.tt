<#@ template language="C#" hostspecific="true" debug="false" #>
<#@ output extension="Dockerfile" #>
<#@ parameter name="ProjectName" type="System.String" #>

# AutoGenerated by Maker <#= DateTime.Now #>
# Stage 1: Build and install tools
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /app

# Install dotnet tools
RUN dotnet tool install --global dotnet-trace \
    && dotnet tool install --global dotnet-dump \
    && dotnet tool install --global dotnet-counters \
    && dotnet tool install --global dotnet-gcdump \
    && dotnet tool install --global dotnet-coverage

ENV PATH="$PATH:/root/.dotnet/tools/tools"

# Copy the tools to a temporary location
WORKDIR /tools
RUN cp -r /root/.dotnet/tools .

# Stage 2: Create the runtime image
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
WORKDIR /app

# Install required dependencies and debugging tools
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        libc6-dev \
        libgdiplus \
        libx11-dev \
        procps \
        strace \
        lsof \
        gdb \
    && rm -rf /var/lib/apt/lists/*

# Copy the tools from the build stage
COPY --from=build /tools /root/.dotnet/tools

# Copy the application files
COPY ./publish .

# Ensure the tools are in the PATH
ENV PATH="$PATH:/root/.dotnet/tools/tools"
ENV ASPNETCORE_URLS=http://*:80

ENTRYPOINT ["dotnet", "<#= ProjectName #>.dll"]

<#+
void GenerateApiDockerFile()
{
        if (!Directory.Exists(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "BackEnd")))
        {
            Directory.CreateDirectory(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "BackEnd"));
        }
    
    // Write the generated content to a separate Docker Compose file
    File.WriteAllText(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "BackEnd", "Dockerfile"), this.GenerationEnvironment.ToString());
    this.GenerationEnvironment.Clear();
}
#>
