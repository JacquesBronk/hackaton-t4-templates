<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Text.Json" #>
<#@ assembly name="System.Memory" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".sql" #>

<#

    var JsonDir = Host.ResolvePath("..\\Definition.json");
    var Json = System.IO.File.ReadAllText(JsonDir);
  var configurationData =  JsonDocument.Parse(Json).RootElement;
#>

--###########################################
-- AutoGenerated by Maker <#= DateTime.Now #>
--###########################################

use master 
 go
 IF DB_ID('<#= configurationData.GetProperty("DbName") #>') IS NOT NULL
    BEGIN
        ALTER DATABASE <#= configurationData.GetProperty("DbName") #> SET SINGLE_USER WITH ROLLBACK IMMEDIATE
        drop database <#= configurationData.GetProperty("DbName") #>
    END
 go
 create database <#= configurationData.GetProperty("DbName") #>
 go
 use <#= configurationData.GetProperty("DbName") #>
 go
 <# static string ToSqlType(string column){ 
    string cType = column?.ToLower();
    string cNullable = "NOT NULL";
    if(cType?.Contains("?")==true){
        cType = cType.Replace("?", "");
        cNullable = "NULL";
    }
    switch(column?.ToLower()){
        case "int":
            return $"INT {cNullable}";
        case "string":
            return $"NVARCHAR(255) {cNullable}";
        case "datetime":
            return $"DATETIME2 {cNullable}";
        case "decimal":
            return $"DECIMAL(10,2) {cNullable}";
        case "bool":
            return $"BIT {cNullable}";
        default:
            return "NVARCHAR(255) NULL";

    }
 } #>
    <# foreach (var table in configurationData.GetProperty("DbTable").EnumerateArray())
    { #>
        CREATE TABLE <#= table.GetProperty("TableName") #> ( 
        <# 

            foreach (var column in table.GetProperty("Columns").EnumerateArray())
            {  
                bool IsPrimaryKey = false;
                if (column.TryGetProperty("IsPrimaryKey", out JsonElement element))
                {
                  IsPrimaryKey = element.GetBoolean();
                }

                if (IsPrimaryKey)
                { #>
                    <#= column.GetProperty("Name") #> <#= ToSqlType(column.GetProperty("Type").ToString()) #> IDENTITY(1,1) PRIMARY KEY,
                <# }else{ #>
                    <#= column.GetProperty("Name") #> <#= ToSqlType(column.GetProperty("Type").ToString()) #>,
                <# } #>
            <# } #>
        );
        GO  
        
    <# } #> 